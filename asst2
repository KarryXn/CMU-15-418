#include <stdio.h>

#include <cuda.h>
#include <cuda_runtime.h>
#include <driver_functions.h>

#include <thrust/scan.h>
#include <thrust/device_ptr.h>
#include <thrust/device_malloc.h>
#include <thrust/device_free.h>

#include "CycleTimer.h"


extern float toBW(int bytes, float sec);


/* Helper function to round up to a power of 2.
 */
static inline int nextPow2(int n)
{
    n--;
    n |= n >> 1;
    n |= n >> 2;
    n |= n >> 4;
    n |= n >> 8;
    n |= n >> 16;
    n++;
    return n;
}
// void exclusive_scan_iterative(int* data, int* end)
// {
// int N = end - data;
// // upsweep phase.
// for (int twod = 1; twod < N; twod*=2)
// {
// int twod1 = twod*2;
// parallel_for (int i = 0; i < N; i += twod1)
// data[i+twod1-1] += data[i+twod-1];
// }
// data[N-1] = 0;
// // downsweep phase.
// for (int twod = N/2; twod >= 1; twod /= 2)
// {
// int twod1 = twod*2;
// parallel_for (int i = 0; i < N; i += twod1)
// {
// int t = data[i+twod-1];
// data[i+twod-1] = data[i+twod1-1];
// // change twod1 below to twod to reverse prefix sum.
// data[i+twod1-1] += t;
// }
// }
// }
__global__ void exclusive_scan_kernel(int* data, int N) {
    for (int twod = 1; twod < N; twod *= 2) { 
        int twod1 = twod * 2;
        for (int i = threadIdx.x; i < N; i += blockDim.x) {     /*threadId.x代表着线程在块中的索引值,blockDim 是 CUDA 编程中一个代表线程块尺寸的变量*/
            if ((i % twod1) == 0) {
                data[i + twod1 - 1] += data[i + twod - 1];
            }
        }
        __syncthreads();/*为了确保线程之间的协同工作和数据 同步*/
    }

    if (threadIdx.x == 0) {
        data[N - 1] = 0;
    }

    for (int twod = N / 2; twod >= 1; twod /= 2) {
        int twod1 = twod * 2;
        for (int i = threadIdx.x; i < N; i += blockDim.x) {
            if ((i % twod1) == 0) {
                int t = data[i + twod - 1];
                data[i + twod - 1] = data[i + twod1 - 1];
                data[i + twod1 - 1] += t;
            }
        }
        __syncthreads();
    }
}

void exclusive_scan(int* device_data, int length) {
    int blockSize = 256;
    int rounded_length = nextPow2(length);/*向上舍入到最接近的大于等于它的2的幂次方的数*/
    
    exclusive_scan_kernel<<<1, blockSize>>>(device_data, rounded_length);
    /* TODO
     * Fill in this function with your exclusive scan implementation.
     * You are passed the locations of the data in device memory
     * The data are initialized to the inputs.  Your code should
     * do an in-place scan, generating the results in the same array.
     * This is host code -- you will need to declare one or more CUDA
     * kernels (with the __global__ decorator) in order to actually run code
     * in parallel on the GPU.
     * Note you are given the real length of the array, but may assume that
     * both the data array is sized to accommodate the next
     * power of 2 larger than the input.
     * 在此函数中填写您的排他性扫描实现。
     * 您将得到数据在设备内存中的位置。
     * 数据初始化为输入。 您的代码应
     * 进行就地扫描，在同一数组中生成结果。
     * 这是主机代码 -- 你需要声明一个或多个 CUDA
     * 内核（使用 __global__ 装饰器），以便在 GPU 上并行运行代码。
     * 在 GPU 上并行运行代码。
     * 请注意，您将得到数组的实际长度，但可以假设
     * 数据数组的大小都能容纳下一个
     * 的 2 次方。
     */
}



/* This function is a wrapper around the code you will write - it copies the
 * input to the GPU and times the invocation of the exclusive_scan() function
 * above. You should not modify it.
 */
double cudaScan(int* inarray, int* end, int* resultarray)
{
    int* device_data;
    // We round the array size up to a power of 2, but elements after
    // the end of the original input are left uninitialized and not checked
    // for correctness.
    // You may have an easier time in your implementation if you assume the
    // array's length is a power of 2, but this will result in extra work on
    // non-power-of-2 inputs.
    int rounded_length = nextPow2(end - inarray);
    cudaMalloc((void **)&device_data, sizeof(int) * rounded_length);

    cudaMemcpy(device_data, inarray, (end - inarray) * sizeof(int),
               cudaMemcpyHostToDevice);

    double startTime = CycleTimer::currentSeconds();

    exclusive_scan(device_data, end - inarray);

    // Wait for any work left over to be completed.
    // cudaThreadSynchronize();
    double endTime = CycleTimer::currentSeconds();
    double overallDuration = endTime - startTime;

    cudaMemcpy(resultarray, device_data, (end - inarray) * sizeof(int),
               cudaMemcpyDeviceToHost);
    return overallDuration;
}

/* Wrapper around the Thrust library's exclusive scan function
 * As above, copies the input onto the GPU and times only the execution
 * of the scan itself.
 * You are not expected to produce competitive performance to the
 * Thrust version.
 */
double cudaScanThrust(int* inarray, int* end, int* resultarray) {

    int length = end - inarray;
    thrust::device_ptr<int> d_input = thrust::device_malloc<int>(length);
    thrust::device_ptr<int> d_output = thrust::device_malloc<int>(length);

    cudaMemcpy(d_input.get(), inarray, length * sizeof(int),
               cudaMemcpyHostToDevice);

    double startTime = CycleTimer::currentSeconds();

    thrust::exclusive_scan(d_input, d_input + length, d_output);

    // cudaThreadSynchronize();
    double endTime = CycleTimer::currentSeconds();

    cudaMemcpy(resultarray, d_output.get(), length * sizeof(int),
               cudaMemcpyDeviceToHost);
    thrust::device_free(d_input);
    thrust::device_free(d_output);
    double overallDuration = endTime - startTime;
    return overallDuration;
}


__global__ void find_peaks_kernel(int* input, int* output, int length) {
    int tid = threadIdx.x + blockIdx.x * blockDim.x;//唯一索引值
    
    // 判断是否是第一个或最后一个元素，这些元素不可能是峰值
    if (tid > 0 && tid < length - 1) {
        // 判断当前元素是否大于前后元素
        if (input[tid] > input[tid - 1] && input[tid] > input[tid + 1]) {
            output[tid] = 1; // 当前元素是峰值
        } else {
            output[tid] = 0; // 当前元素不是峰值
        }
    } else {
        output[tid] = 0; // 不是峰值
    }
}

int find_peaks(int *device_input, int length, int *device_output) {
    int blockSize = 256;
    int numBlocks = (length + blockSize - 1) / blockSize;

    find_peaks_kernel<<<numBlocks, blockSize>>>(device_input, device_output, length);

    int* host_output = new int[length];
    cudaMemcpy(host_output, device_output, length * sizeof(int), cudaMemcpyDeviceToHost);//通过 cudaMemcpy 将 device_output 中的数据传输回主机内存中的 host_output 数组中

    int numPeaks = 0;

    // 统计峰值的数量并将峰值的索引存储在 device_output 中
    for (int i = 0; i < length; i++) {
        if (host_output[i] == 1) {
            device_output[numPeaks] = i;
            numPeaks++;
        }
    }

    delete[] host_output;
    
    return numPeaks;
     /* TODO:
     * Finds all elements in the list that are greater than the elements before and after,
     * storing the index of the element into device_result.
     * Returns the number of peak elements found.
     * By definition, neither element 0 nor element length-1 is a peak.
     *
     * Your task is to implement this function. You will probably want to
     * make use of one or more calls to exclusive_scan(), as well as
     * additional CUDA kernel launches.
     * Note: As in the scan code, we ensure that allocated arrays are a power
     * of 2 in size, so you can use your exclusive_scan function with them if
     * it requires that. However, you must ensure that the results of
     * find_peaks are correct given the original length.
     查找列表中大于前后元素的所有元素、
     * 将元素索引存储到 device_result 中。
     * 返回找到的峰值元素数量。
     * 根据定义，元素 0 和元素 length-1 都不是峰值。
     *
     * 你的任务是实现这个函数。您可能需要
     * 使用一次或多次调用 exclusive_scan()，以及
     * 额外的 CUDA 内核启动。
     * 注意：与扫描代码一样，我们确保分配的数组大小为 2 的幂次方。
     * 因此，如果需要，您可以使用您的 exclusive_scan 函数来处理它们。
     * 因此，如果需要，您可以使用您的 exclusive_scan 函数。不过，您必须确保
     * find_peaks 的结果是正确的。
     */

}




/* Timing wrapper around find_peaks. You should not modify this function.
 */
double cudaFindPeaks(int *input, int length, int *output, int *output_length) {
    int *device_input;
    int *device_output;
    int rounded_length = nextPow2(length);
    cudaMalloc((void **)&device_input, rounded_length * sizeof(int));
    cudaMalloc((void **)&device_output, rounded_length * sizeof(int));
    cudaMemcpy(device_input, input, length * sizeof(int),
               cudaMemcpyHostToDevice);

    double startTime = CycleTimer::currentSeconds();

    int result = find_peaks(device_input, length, device_output);

    // cudaThreadSynchronize();
    double endTime = CycleTimer::currentSeconds();

    *output_length = result;

    cudaMemcpy(output, device_output, length * sizeof(int),
               cudaMemcpyDeviceToHost);

    cudaFree(device_input);
    cudaFree(device_output);

    return endTime - startTime;
}


void printCudaInfo()
{
    // for fun, just print out some stats on the machine

    int deviceCount = 0;
    cudaError_t err = cudaGetDeviceCount(&deviceCount);

    printf("---------------------------------------------------------\n");
    printf("Found %d CUDA devices\n", deviceCount);

    for (int i=0; i<deviceCount; i++)
    {
        cudaDeviceProp deviceProps;
        cudaGetDeviceProperties(&deviceProps, i);
        printf("Device %d: %s\n", i, deviceProps.name);
        printf("   SMs:        %d\n", deviceProps.multiProcessorCount);
        printf("   Global mem: %.0f MB\n",
               static_cast<float>(deviceProps.totalGlobalMem) / (1024 * 1024));
        printf("   CUDA Cap:   %d.%d\n", deviceProps.major, deviceProps.minor);
    }
    printf("---------------------------------------------------------\n");
}
